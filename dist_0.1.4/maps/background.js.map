{"version":3,"names":[],"mappings":"","sources":["background.js"],"sourcesContent":["/*global chrome, console, WebSocket */\r\n/*global setTimeout, setInterval, clearInterval*/\r\n'use strict';\r\n\r\nvar badge = {\r\n  badge: 'hide',\r\n  badges: {\r\n    hide: [''],\r\n    ok: [' OK ', '#44992c'],\r\n    no: [' NO ', '#f33'],\r\n    connected: ['-(c-', [42,181,130,200]],\r\n    // not using disconnect badge b/c visually dominating\r\n    disconnected: ['-(  c-', [179,179,29,200]]\r\n  },\r\n\r\n  set: function (b){\r\n    badge.badge = b\r\n    chrome.browserAction\r\n      .setBadgeText({text: this.badges[b][0]})\r\n    if(this.badges[b][1])\r\n      chrome.browserAction\r\n        .setBadgeBackgroundColor({color:this.badges[b][1]})\r\n  },\r\n\r\n  tempSet: function (b, delay){\r\n    var currB = badge.badge\r\n    if (currB !== b){\r\n      badge.set(b)\r\n      badge.delay(currB, delay)\r\n    }\r\n  },\r\n\r\n  delay: function (b, delay){\r\n    setTimeout(function (){\r\n      badge.set(b)\r\n    }, delay||1200)\r\n  }\r\n\r\n}\r\n// we'll start with disconnected badge\r\n// badge.set('hide')\r\n\r\n/////////////////////////////////////////////////////\r\n\r\nfunction reloadExtensions(msg) {\r\n  var app = msg.path\r\n\r\n  // disable then enable 1 extension or app\r\n  function reload (ext) {\r\n    // false for disable, true for enable\r\n    chrome.management.setEnabled(ext.id, false, function() {\r\n      chrome.management.setEnabled(ext.id, true, function() {\r\n        // func to tell extension it was auto-reloaded\r\n        function forwardMsg(){\r\n          chrome.runtime.sendMessage(ext.id, msg)\r\n        }\r\n        // apps still need launch\r\n        if (ext.type.match(/app/))\r\n          chrome.management.launchApp(ext.id, forwardMsg)\r\n        else forwardMsg()\r\n        console.log(ext.name + \" reloaded\")\r\n        // show an \"OK\" badge\r\n        badge.tempSet('ok')\r\n      })\r\n    })\r\n  }\r\n\r\n  chrome.management.getAll(function(extensions) {\r\n    extensions = extensions.filter(function (ext){   \r\n      return (\r\n        // installed as unpacked folder\r\n        (ext.installType===\"development\")\r\n        // if app not specified, only reload enabled\r\n        && (app || ext.enabled===true)\r\n        // restrict to app name or id if given\r\n        && ( (!app) || app===ext.name\r\n          || app===ext.id)\r\n        // Clerc shouldn't reload itself\r\n        && (ext.id !==chrome.runtime.id)\r\n      ) \r\n    })\r\n    extensions.forEach(reload)\r\n  })\r\n}\r\n\r\n//////////////////////////////////////////////\r\n\r\nvar ws\r\n\r\nfunction connectSocket() {\r\n  // don't open a bunch of duplicate sockets\r\n  if (ws && ws.readyState !== 3) \r\n    return\r\n  \r\n  ws = new WebSocket('ws://localhost:35729/livereload')\r\n\r\n  var handshake = {\r\n    command: 'hello',\r\n    protocols: [\r\n        'http://livereload.com/protocols/official-7',\r\n        'http://livereload.com/protocols/official-8',\r\n        'http://livereload.com/protocols/2.x-origin-version-negotiation'],\r\n  }\r\n  handshake = JSON.stringify(handshake)\r\n\r\n  ws.onerror = function (){\r\n    badge.set('no')\r\n    badge.delay('hide', 1200)\r\n    console.log('failed to connect to livereload')\r\n  }\r\n\r\n  ws.onopen = function socketopen(){\r\n    console.log('connected to livereload')\r\n    \r\n    ws.send(handshake)\r\n\r\n    badge.set('ok')\r\n    badge.delay('connected', 1200)\r\n    \r\n    chrome.browserAction.onClicked.removeListener(connectSocket)\r\n    chrome.browserAction.onClicked.addListener(disconnectSocket)\r\n\r\n    ws.onclose = onClosedSocket\r\n  }\r\n\r\n  ws.onmessage = function socketmessage(evt) {\r\n    var msg = JSON.parse(evt.data)\r\n    if (msg.command === 'reload')\r\n      reloadExtensions(msg)\r\n  }\r\n}\r\n\r\nfunction onClosedSocket(){\r\n  console.log('disconnected from livereload')\r\n  badge.set('hide')\r\n  chrome.browserAction.onClicked.removeListener(disconnectSocket)\r\n  chrome.browserAction.onClicked.addListener(connectSocket)\r\n  ws.onclose = null\r\n}\r\n\r\nfunction disconnectSocket() { ws.close() }\r\n\r\nchrome.browserAction.onClicked.addListener(connectSocket)\r\n\r\n// might as well try to connect on load\r\nconnectSocket()\r\n"],"file":"background.js","sourceRoot":"/source/"}